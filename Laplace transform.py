# -*- coding: utf-8 -*-
"""Laplace transform.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N7NnvuX1m6EDvqGBO1w2ORrWZ_uNN9S5

<h1>Laplace Transform using sympy</h1>
<h4 style="color:red;">Under development</h4>
<p>This module enables functions in Frequency domain to s domain. `sympy` module houses a wide variety of functions apart from laplace , such as integration , differentation , fourier transforms and several other advanced math functions and methods. This code enables users to input functions either in frequency domain or s domain and find their inverse and vice versa.

:<h3>Import sympy module and define the printing method</h3>
"""

# Commented out IPython magic to ensure Python compatibility.
import sympy as lp
lp.init_printing()
from sympy import sympify
import matplotlib.pyplot as plt
# %matplotlib inline

"""<h3>Initialise t and s variables as sympy variables</h3>"""

t,s= lp.symbols('t,s')
a = input('Enter value for a')
A = lp.symbols(a,real = True,positive = True)

"""<h3>Define a function to return transform</h3>"""

def laplace(f):
    return lp.laplace_transform(f, t, s, noconds=True)

"""<h3>Define a function to return inverse transform</h3>"""

def inverse_laplace_transforms(F):
    return lp.inverse_laplace_transform(F, s, t,noconds = True)

"""<h3>Creating a list to generate general laplace transforms and their inverses</h3>"""

omg = input('enter value for omega:')
omega = lp.Symbol(omg, real=True)
exp = lp.exp
sin = lp.sin
cos = lp.cos
functions = [1,
         t,
         exp(-A*t),
         t*exp(-A*t),
         t**2*exp(-A*t),
         sin(omega*t),
         cos(omega*t),
         1 - exp(-A*t),
         exp(-A*t)*sin(omega*t),
         exp(-A*t)*cos(omega*t),
         ]
functions

"""<h3>Generating inverses of general terms</h3>"""

gist = [laplace(target) for target in functions]
k = [inverse_laplace_transforms(target) for target in gist]
k

print(gist)

"""<h3>User input s domain function</h3>"""

j = input('Enter function(s domain)')
inv = inverse_laplace_transforms(j)
print(inv)

"""<h3>User input Frequency domain function</h3>"""

strg = input('Enter function(Frequency domain)')
ofg = laplace(strg)
(sympify(ofg))

"""<h3>Partial fraction Complex inverses</h3>"""

partial = input('Enter partial eqn function')
tg = inverse_laplace_transforms(sympify(partial).apart(s))
tg

inv2 = inverse_laplace_transforms(partial)
print(lp.init_printing(partial))
partial

jk = lp.acot(1+s)
inv3 = inverse_laplace_transforms(jk)
td = lp.integrate(inv3,s)
td

h = sympify("10/5+4/2")
h

